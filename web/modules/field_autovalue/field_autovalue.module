<?php

/**
 * @file
 * Field Autovalue module.
 */

declare(strict_types = 1);

use Drupal\Component\Plugin\Exception\PluginException;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function field_autovalue_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  /** @var \Drupal\field\FieldConfigInterface $field_config */
  $field_config = $form_state->getBuildInfo()['callback_object']->getEntity();

  /** @var \Drupal\field_autovalue\Plugin\FieldAutovalueManager $plugin_manager */
  $plugin_manager = \Drupal::service('plugin.manager.field_autovalue');

  $options = $plugin_manager->getSelectOptionsForFieldType($field_config->getType());
  if (!$options) {
    return;
  }

  $form['third_party_settings']['field_autovalue']['autovalue'] = [
    '#type' => 'select',
    '#title' => t('Autovalue plugin'),
    '#description' => t('Which autovalue plugin to use in order to generate automatic values for this field.'),
    '#options' => $options,
    '#default_value' => $field_config->getThirdPartySetting('field_autovalue', 'autovalue'),
    '#empty_option' => t('No plugin'),
  ];
}

/**
 * Implements hook_entity_presave().
 */
function field_autovalue_entity_presave(EntityInterface $entity): void {
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  foreach ($entity->getFieldDefinitions() as $field_name => $definition) {
    if (!$definition instanceof FieldConfigInterface) {
      continue;
    }

    $plugin = $definition->getThirdPartySetting('field_autovalue', 'autovalue');
    if ($plugin === NULL || $plugin === '') {
      continue;
    }

    try {
      /** @var \Drupal\field_autovalue\Plugin\FieldAutovalueInterface $instance */
      $instance = \Drupal::service('plugin.manager.field_autovalue')->createInstance($plugin);
      $instance->setAutovalue($entity->get($field_name));
    }
    catch (PluginException $exception) {
      // Something went wrong with the plugin instantiation, we do nothing.
      continue;
    }
  }

}
